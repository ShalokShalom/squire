#!../../squire -f

import "deck.sq"

renowned deck = shuffle_pile(new_deck())
renowned discard = [draw_from_pile(deck)]

journey new_hand(deck, size) {
	local hand = []
	local i = 0

	whilst i < size {
		insert(hand, i, draw_from_pile(deck))
		i = i + 1
	}

	reward hand
}

journey try_play(card) {
	renowned discard
	renowned Card
	last = discard[length(discard) - 1]

	if kindof(card) != Card {
		reward nay
	}

	if card.rank != '8' && card.rank != last.rank && card.suit != last.suit {
		reward nay
	}

	add_to_pile(discard, card)
	reward yay
}

journey draw_for(whom) {
	renowned discard
	renowned deck

	if !deck {
		deck = shuffle_pile(discard)
		discard = []
	}

	add_to_pile(whom, card = draw_from_pile(deck))
	reward card
}

journey computer_turn(computer) {
	local i = 0
	local len = length(computer)

	whilst i < len {
		if try_play(card = computer[i]) {
			print("Computer plays " + cardstr(card) + "\n")
			delete(computer, i)
			reward
		}
		i = i + 1
	}

	print("Computer draws.\n")
	draw_for(computer)
}

journey user_turn(user, computer_cards) {
	print("\nDeck: " + string(length(deck))
			+ " cards\nPile: " + cardstr(discard[-1]) +
			"\nHand (" + string(length(user)) + " cards) (Computer has " + string(computer_cards) + " cards):\n ")

	local i = 0
	whilst i < length(user) { print(string(i + 1) + "  "); i = i + 1 }
	print("('D' to draw)\n" + pilestr(user) + "\n")

	whilst yay {
		if (input = inquire()) == 'D' {
			print("Drew: " + cardstr(draw_for(user)) + "\n")
			reward
		}

		index = number(input) - 1

		if try_play(card = user[index]) {
			if card.rank == '8' {
				renowned SUITS# = ['♦', '♥', '♣', '♠'];
				print("What suit?\n1 2 3 4"+"\n" + SUITS[0] + ' ' + SUITS[1] + ' ' + SUITS[2] + ' ' + SUITS[3] + "\n")
				# todo: assign to index -1
				insert(discard, length(discard), Card('8', SUITS[number(inquire()) - 1]))
			}
			delete(user, index)
			reward
		}

		print("Invalid input! Try again!\n");
	}
}

user = new_hand(deck, 7)
computer = new_hand(deck, 7)

turn = random() % 2
whilst user && computer {
	# print("\n") < -- removingthis segfaults
	if turn == 0 {
		user_turn(user, length(computer))
	} alas {
		computer_turn(computer)
	}

	turn = (turn + 1) % 2
	# print("\n")
}

if user {
	print("Computer wins\n")
} alas {
	print("You win!\n")
}
