form Fraction {
	matter numer, denom;

	describe coerce(what) {
		if kindof(what) == Fraction {
			reward what
		} alas {
			reward Fraction(number(what), I)
		}
	}

	describe gcd(numer, denom) {
		nigh tmp;

		whilst (tmp = denom) {
			denom = numer % denom;
			numer = tmp;
		}

		reward numer;
	}

	substantiate(numer, denom) {
		nigh is_neg = nay;

		if !denom {
			hark "fraction with zero denom"
		}

		if numer < N {
			is_neg = yay;
			numer = -numer;
		}

		if denom < N {
			is_neg = !is_neg;
			denom = -denom;
		}

		gcd = Fraction.gcd(numer, denom);

		my.numer = numer / gcd;
		my.denom = denom / gcd;

		if is_neg {
			my.numer = -my.numer
		}
	}

	action -@() { reward Fraction(-my.numer, -my.denom) }

	@henceforth $fracfn($fn, $numer, $denom) =
		<< action $fn(rhs) {
			rhs = Fraction.coerce(rhs);
			reward Fraction($numer, $denom)
		} >>;
	$fracfn(+, my.numer*rhs.denom + rhs.numer*my.denom, my.denom * rhs.denom);
	$fracfn(-, my.numer*rhs.denom - rhs.numer*my.denom, my.denom * rhs.denom);
	$fracfn(*, my.numer * rhs.numer, my.denom * rhs.denom);
	$fracfn(/, my.numer * rhs.denom, my.denom * rhs.numer);
	@nevermore $fracfn

	action is_whole() {
		reward my.denom == I
	}

	action to_string() {
		if my.is_whole() {
			reward string(my.numer)
		} alas {
			reward "\(my.numer)/\(my.denom)"
		}
	}

	action veracity() {
		reward boolean(my.numer)
	}

	action tally() {
		reward my.numer / my.denom
	}
}

dump(Fraction(10, 3) / 5);


dump(Fraction.gcd(12, 8));

fr = Fraction(III, IV);

proclaim("-(3/4+43) = \(-fr.+(XLII))\n"); # => -(3/4+43) = -CXXIX/IV

__END__
@henceforth $opfn($name, $op, $precheck) = <<
	journey $name(lhs, rhs) {
		$precheck;
		reward lhs $op rhs;
	} >> ;

$opfn(sub, -, );
$opfn(div, /, if !rhs { hark "cant divide by zero"; });

attempt {
	proclaim("4 / (3 - 3) = \(div(4, sub(3, 3)))");
} retreat err {
	proclaim("oops: \(err)\n")
}

__END__
@henceforth $opfn($name, $op, $precheck) =
	journey $name(lhs, rhs) {
		$precheck;
		reward lhs $op rhs
	};

$opfn(add, +, 3);
dump(add(3, 4));


__END__
@henceforth $form = form $name { matter x, y };
@henceforth $name = foo;
$form;
@henceforth $name = bar;
$form;

dump(foo(3,4));
dump(bar(3,4));
#proclaim("Hear ye, hear ye. $foo=\($foo)\n")





__END__
i=N;
bar:
proclaim(3);
whence bar;
proclaim("spot I: \(i=i+1)\n");

whence bar;
proclaim("spot II: \(i=i+1)\n");

whence bar;
proclaim("spot III: \(i=i+1)\n");

__END__

a=["a=", 0, ";"];a[1]=string(a)
proclaim(a)

__END__
# journey sieve(n){	
# 	insert(sieve=[],n,unbenknownst);
# 	reward sieve
# }
# 
# dump

# `journey`s are functions
journey fizzbuzz() {
	nigh i = I # numbers are roman numerals

	# while i is less than 100
	whilst i <= C {
		nigh txt = ""

		if !(i % III) { txt = txt + "Fizz" }
		if !(i % V) { txt = txt + "Buzz" }

		# `proclaim` is print
		if txt {
			proclaim(txt + "\n")
		} alas { # `alas` is `else`
			# `arabic` is used to convert output to roman numerals.
			proclaim(arabic(i) + "\n")
		}

		i = i + I
	}
}

fizzbuzz()