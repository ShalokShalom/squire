renowned die

myth Args {
	equip a1, a2, a3, a4
}

myth Ast {
	equip fn, args
}

journey run(arg) {
	renowned Variable

	if kindof(arg) == Ast { fn = arg.fn; reward fn(arg.args) }
	if kindof(arg) == Variable { reward arg.run() }
	reward arg
}

journey to_string(arg) { reward string(run(arg)) }
journey to_number(arg) { reward number(run(arg)) }
journey to_boolean(arg) { reward boolean(run(arg)) }

# Arity zero
journey sq_prompt(_args) {
	reward inquire()
}

journey sq_random(_args) {
	reward random()
}

journey sq_true(_args) {
	reward yay
}

journey sq_false(_args) {
	reward nay
}

journey sq_null(_args) {
	reward null
}

# Arity one

journey sq_eval(args) {
	reward run(parse(to_string(args.a1)))
}

journey sq_block(args) {
	reward args.a1
}

journey sq_call(args){
	reward run(run(args.a1))
}

journey sq_system(args) {
	reward system(to_string(args.a1))
}

journey sq_quit(args) {
	dismount(to_number(args.a1))
}

journey sq_not(args) {
	reward !to_boolean(args.a1)
}

journey sq_length(args) {
	reward length(to_string(args.a1))
}

journey sq_dump(args) {
	arg = run(args.a1)

	if kindof(arg) == 'string' { proclaim('String(' + arg + ')') }
	alas if kindof(arg) == 'number' { proclaim('Number(' + string(arg) + ')') }
	alas if kindof(arg) == 'boolean' { proclaim('Boolean(' + string(arg) + ')') }
	alas if kindof(arg) == 'null' { proclaim('Null()') }
	alas { dump(arg) }

	proclaim("\n")

	reward arg
}


journey sq_output(args) {
	text = to_string(args.a1);

	if text == '\\' {
		reward # ignore just empty strings.
	}

	if text && substr(text, length(text) - 1, 1) == '\\' {
		proclaim(substr(text, 0, length(text) - 1))
	} alas {
		proclaim(text + "\n")
	}
}

# Arity two

journey sq_add(args) {
	kind = kindof(lhs = run(args.a1))

	if kind == "string" { reward lhs + to_string(args.a2) }
	if kind == "number" { reward lhs + to_number(args.a2) }

	die("cannot add to a '" + kind + "'")
}

journey sq_sub(args) {
	kind = kindof(lhs = run(args.a1))

	if kind == "number" { reward lhs - to_number(args.a2) }

	die("cannot subtract to a '" + kind + "'")
}

journey sq_mul(args) {
	kind = kindof(lhs = run(args.a1))

	if kind == "string" { reward lhs * to_number(args.a2) }
	if kind == "number" { reward lhs * to_number(args.a2) }

	die("cannot multiply a '" + kind + "'")
}

journey sq_div(args) {
	kind = kindof(lhs = run(args.a1))

	if kind != "number" { die("cannot divide a '" + kind + "'") }
	if !(rhs = to_number(args.a2)) { die("cannot divide by zero") }

	reward lhs / rhs
}

journey sq_mod(args) {
	kind = kindof(lhs = run(args.a1))

	if kind != "number" { die("cannot modulo a '" + kind + "'") }
	if !(rhs = to_number(args.a2)) { die("cannot modulo by zero") }

	reward lhs % rhs
}

journey sq_pow(args) {
	if kindof(base = run(args.a1)) != 'number' { die("cannot exponentiate a '" + kindof(base) + "'") }
	exp = to_number(args.a2)

	if exp < 0 {
		if base == -1 { if exp % 2 { reward -1 } alas { reward 1 } }
		if base == 0 { die("cannot exponentiate zero by a negative power") }
		if base == 1 { reward 1 }
		reward 0
	}

	result = 1
	whilst exp {
		result = result * base
		exp = exp - 1
	}

	reward result
}

journey sq_lth(args) {
	kind = kindof(lhs = run(args.a1))

	if kind == 'number' { reward lhs < to_number(args.a2) }
	if kind == 'string' { reward lhs < to_string(args.a2) }
	if kind == 'boolean' { reward to_boolean(args.a2) && !lhs }

	die("cannot compare a '" + kind + "'")
}

journey sq_gth(args) {
	kind = kindof(lhs = run(args.a1))

	if kind == 'number' { reward lhs > to_number(args.a2) }
	if kind == 'string' { reward lhs > to_string(args.a2) }
	if kind == 'boolean' { reward !to_boolean(args.a2) && lhs }

	die("cannot compare a '" + kind + "'")
}

journey sq_eql(args) {
	reward run(args.a1) == run(args.a2)
}

journey sq_and(args) {
	if to_boolean(lhs = run(args.a1)) {
		reward run(args.a2)
	} alas {
		reward lhs
	}
}

journey sq_or(args) {
	if to_boolean(lhs = run(args.a1)) {
		reward lhs
	} alas {
		reward run(args.a2)
	}
}

journey sq_then(args) {
	run(args.a1)
	reward run(args.a2)
}

journey sq_assign(args) {
	args.a1.assign(value=run(args.a2))

	reward value
}

journey sq_while(args) {
	whilst to_boolean(args.a1) {
		run(args.a2)
	}
}

# Arity three

journey sq_if(args) {
	if to_boolean(args.a1) {
		reward run(args.a2)
	} alas {
		reward run(args.a3)
	}
}

journey sq_get(args) {
	str = to_string(args.a1)
	start = to_number(args.a2)
	len = to_number(args.a3)

	reward substr(str, start, len)
}

journey sq_set(args) {
	str = to_string(args.a1)
	start = to_number(args.a2)
	len = to_number(args.a3)
	repl = to_string(args.a4)

	reward substr(str, 0, start) + repl + substr(str, start + len, length(str))
}

journey parse_function(fn) {
	renowned parse_expr

	args = Args(null, null, null, null)

	if fn == 'P' { reward Ast(sq_prompt, args) }
	if fn == 'R' { reward Ast(sq_random, args) }
	if fn == 'T' { reward Ast(sq_true, args) }
	if fn == 'F' { reward Ast(sq_false, args) }
	if fn == 'N' { reward Ast(sq_null, args) }

	if null == (args.a1 = parse_expr()) { die("unable to parse argument 1 for '" + fn + "'") }

	if fn == 'E' { reward Ast(sq_eval, args) }
	if fn == 'B' { reward Ast(sq_block, args) }
	if fn == 'C' { reward Ast(sq_call, args) }
	if fn == '`' { reward Ast(sq_system, args) }
	if fn == 'Q' { reward Ast(sq_quit, args) }
	if fn == 'L' { reward Ast(sq_length, args) }
	if fn == '!' { reward Ast(sq_not, args) }
	if fn == 'D' { reward Ast(sq_dump, args) }
	if fn == 'O' { reward Ast(sq_output, args) }

	if null == (args.a2 = parse_expr()) { die("unable to parse argument 2 for '" + fn + "'") }

	if fn == '+' { reward Ast(sq_add, args) }
	if fn == '-' { reward Ast(sq_sub, args) }
	if fn == '*' { reward Ast(sq_mul, args) }
	if fn == '/' { reward Ast(sq_div, args) }
	if fn == '%' { reward Ast(sq_mod, args) }
	if fn == '^' { reward Ast(sq_pow, args) }
	if fn == '<' { reward Ast(sq_lth, args) }
	if fn == '>' { reward Ast(sq_gth, args) }
	if fn == '?' { reward Ast(sq_eql, args) }
	if fn == '&' { reward Ast(sq_and, args) }
	if fn == '|' { reward Ast(sq_or, args) }
	if fn == ';' { reward Ast(sq_then, args) }
	if fn == '=' { reward Ast(sq_assign, args) }
	if fn == 'W' { reward Ast(sq_while, args) }

	if null == (args.a3 = parse_expr()) { die("unable to parse argument 3 for '" + fn + "'") }

	if fn == 'I' { reward Ast(sq_if, args) }
	if fn == 'G' { reward Ast(sq_get, args) }

	if null == (args.a4 = parse_expr()) { die("unable to parse argument 4 for '" + fn + "'") }

	if fn == 'S' { reward Ast(sq_set, args) }

	die("unknown function name '" + fn + "'")
}
