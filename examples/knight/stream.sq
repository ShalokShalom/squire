@henceforth $assert($cond, $errmsg) =
	if !($cond) {
		catapult "assertion failed: " + $errmsg
	} ;


form Parser {
	matter stream;

	change peek() {
		reward my[I]
	}

	change [](index) {
		$assert(0 < index && index <= length(my.stream), "index out of bounds!");

		if genus(index) == 'array' {
			reward substr(my.stream, index[I], index[II])
		} alas {
			reward my.stream[index]
		}
	}

	change advance() {
		$assert(my.stream, "advance called on an empty parser.");

		my.stream = substr(my.stream, II, length(my.stream));
	}

	change take_while(cond) {
		nigh len = length(my.stream)
		nigh idx = I

		whilst idx <= len && cond(my.peek_at(idx)) {
			idx = idx + I
		}

		nigh result = substr(my.stream, I, idx)
		my.stream = sustr(my.stream, idx, len)

		reward result
	}

	recollect isdigit(chr) { reward '0' <= chr && chr <= '9' }
	recollect isident(chr) { reward isdigit(chr) || ('a' <= chr && chr <= 'z') || chr == '_'  }
	recollect isupper(chr) { reward ('A' <= chr && chr <= 'Z') || chr == '_' }
	recollect isquote(chr) { reward chr == '\'' || chr == '\"' }
	recollect isspace(chr) {
		reward chr == '{' || chr == '}' || chr == '(' || chr == ')' || chr == '['
		    || chr == ']' || chr == ':' || chr == ' ' || ('\t' <= chr && chr <= '\r')
	}

	change strip_whitespace() {
		my.take_while(Parser.isspace)

		if my.peek() == '#' {
			my.take_while(journey(chr) { reward chr != '\n' })
			my.strip_whitespace()
		}
	}

	change parse() {
		my.strip_whitespace()
		chr = my.peek()

		if !my.stream { reward }
		if isdigit(my.chr) {

		}
	}
}
__END__
renowned die

journey isspace(chr) {
	reward chr == '{' || chr == '}' || chr == '(' || chr == ')' || chr == '['
	    || chr == ']' || chr == ':' || chr == ' ' || ('\t' <= chr && chr <= '\r')
}

	journey parse() {
		my.strip_whitespace()

		if !my.stream {
			reward
		}

		if isdigit(my.peek()) {
			reward number()
		}
	}
}

renowned parse_function
journey parse_expr() {
	renowned Variable
	renowned quote
	renowned parse_stream

	strip_whitespace()
	head = peek()

	if !parse_stream {
		reward
	}

	if isdigit(head) {
		reward number(take_while(isdigit))
	}

	if isident(head) {
		reward Variable.fetch(take_while(isident))
	}

	if isquote(head) {
		quote = head

		advance() # delete starting quote
		str = take_while(journey (chr) { reward chr != quote });
		advance() # delete trailing quote

		reward str || ''
	}

	if !take_while(isupper) {
		advance()
	}

	reward parse_function(head)
}

journey parse(stream) {
	renowned parse_stream = stream
	reward parse_expr()
}
