renowned die

journey isdigit(chr) { reward '0' <= chr && chr <= '9' }
journey isident(chr) { reward isdigit(chr) || ('a' <= chr && chr <= 'z') || chr == '_'  }
journey isupper(chr) { reward ('A' <= chr && chr <= 'Z') || chr == '_' }
journey isquote(chr) { reward chr == '\'' || chr == '\"' }
journey isspace(chr) {
	reward chr == '{' || chr == '}' || chr == '(' || chr == ')' || chr == '['
	    || chr == ']' || chr == ':' || chr == ' ' || ('\t' <= chr && chr <= '\r')
}

myth Parser {
	equip stream

	journey peek() {
		reward substr(thine.stream, 0, 1)
	}

	journey advance() {
		thine.stream =substr(thine.stream, 1, length(thine.stream) - 1)
	}

	journey take_while(cond) {
		len = length(thine.stream)
		idx = 0

		whilst idx <= len && cond(substr(thine.stream, idx, 1)) {
			idx = idx + 1
		}

		if idx == 0 {
			reward null
		}

		result = substr(thine.stream, 0, idx)
		thine.stream = substr(thine.stream, idx, len - 1)

		reward result
	}

	journey strip_whitespace() {
		thine.take_while(isspace)

		if thine.peek() == '#' {
			thine.take_while(journey(chr) { reward chr != '\n' })
			thine.strip_whitespace()
		}
	}

	journey parse() {
		thine.strip_whitespace()

		if !thine.stream {
			reward
		}

		if isdigit(thine.peek()) {
			reward number()
		}
	}
}

renowned parse_function
journey parse_expr() {
	renowned Variable
	renowned quote
	renowned parse_stream

	strip_whitespace()
	head = peek()

	if !parse_stream {
		reward
	}

	if isdigit(head) {
		reward number(take_while(isdigit))
	}

	if isident(head) {
		reward Variable.fetch(take_while(isident))
	}

	if isquote(head) {
		quote = head

		advance() # delete starting quote
		str = take_while(journey (chr) { reward chr != quote });
		advance() # delete trailing quote

		reward str || ''
	}

	if !take_while(isupper) {
		advance()
	}

	reward parse_function(head)
}

journey parse(stream) {
	renowned parse_stream = stream
	reward parse_expr()
}
