new_stream[1]={{{{@henceforth $DEBUG = 1;
@henceforth $assert($cond) = $assert_msg($cond, "assertion failed");

#@whereupon $DEBUG
	@henceforth $assert_msg($cond, $errmsg) =
		if !($cond) {
			catapult "assertion failed: \($errmsg)"
		};
#@alas

#	@henceforth $assert_msg($cond, $errmsg) = ;
#@nowhere;
}}}}
new_stream[2]={{{{@henceforth $DEBUG = 1;
@henceforth $assert($cond) = $assert_msg($cond, "assertion failed");

#@whereupon $DEBUG
	@henceforth $assert_msg($cond, $errmsg) =
		if !($cond) {
			catapult "assertion failed: \($errmsg)"
		};
#@alas

#	@henceforth $assert_msg($cond, $errmsg) = ;
#@nowhere;

@collate "nonidempotent.sq"

form Variable : Non Idempotent {
	matter name, value, assigned;
	essence declared = {};

	imitate(name) {
		$assert(name.genus == 𝔱𝔢𝔵𝔱);

		soul.name = name
		soul.assigned = nay
	}

	recall fetch(name) {
		declared = soul.declared;
		var = declared[name];

		if ni == var {
			reward declared[name] = soul(name)
		} alas {
			reward var
		}
	}

	change run() {
		if !soul.assigned {
			catapult "undefined variable '\(soul.name)'"
		}

		soul.value
	}

	change assign(value) {
		soul.assigned = yay
		soul.value = value
	}
}

x = Variable.fetch("abc");
dump(x);
dump(x.run());

}}}}
new_stream[1]={{{{form Not Idempotent {
	change to_numeral() {
		ran = run()
		ran.to_numeral()
	}

	change to_text() {
		ran = run()
		ran.to_text()
	}

	change to_veracity() {
		ran = run()
		ran.to_numeral()
	}
}}}}}
new_stream[2]={{{{form Not Idempotent {
	change to_numeral() {
		ran = run()
		ran.to_numeral()
	}

	change to_text() {
		ran = run()
		ran.to_text()
	}

	change to_veracity() {
		ran = run()
		ran.to_numeral()
	}
}

form Variable : Non Idempotent {
	matter name, value, assigned;
	essence declared = {};

	imitate(name) {
		$assert(name.genus == 𝔱𝔢𝔵𝔱);

		soul.name = name
		soul.assigned = nay
	}

	recall fetch(name) {
		declared = soul.declared;
		var = declared[name];

		if ni == var {
			reward declared[name] = soul(name)
		} alas {
			reward var
		}
	}

	change run() {
		if !soul.assigned {
			catapult "undefined variable '\(soul.name)'"
		}

		soul.value
	}

	change assign(value) {
		soul.assigned = yay
		soul.value = value
	}
}

x = Variable.fetch("abc");
dump(x);
dump(x.run());

}}}}
