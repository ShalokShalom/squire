form Value {
	matter name, value;

	describe parse(stream) {
		hark "todo";
	}

	action run() {
		renowned Variable

		attempt {
			nigh run = my.value.run;
		} retreat _ {
			reward run.run
		} alas {

		} bow {
		
		}
		if kindof(my.value) == Variable {
			my.value.run()
		}
	}
}

__END__
form Variable {
	matter name, value;

	substantiate(name) {
		my.name = name;
		my.value = unbenknownst;
	}

	describe fetch(name) {
		renowned _variable_names;
		nigh name;

		if !_variable_names { _variable_names = {} } # initializer

		if !(var = _variable_names[name]) {
			var = _variable_names[name] = Variable(name);
		}

		reward var;
	}

	action run() {
		if my.value == unbenknownst {
			catapult "undeifned variable '\(my.name)' ran.";
		}

		reward my.value;
	}

	action set(value) {
		my.value = value;
	}
}

__END__
myth Value {
	equip data

	journey run() {
		renowned Variable
		renowned Ast

		nigh kind = kindof(my.data)

		if (kind == Variable) || (kind == Ast) {
			reward my.data.run()
		} alas {
			reward my.data
		}
	}

	journey to_string() {
		reward string(my.run())
	}

	journey tally() {
		reward number(my.run())
	}

	journey veracity() {
		reward boolean(my.run())
	}
}

myth Fraction {
	equip numer, denom

	realize(numer, denom) {
		my.numer = numer

		if !(my.denom = denom) {
			proclaim("cannot create a fraction with a denom of zero.")
			dismount(1)
		}
	}

	journey to_string() {
		reward string(my.numer) + "/" + string(my.denom)
	}

	journey veracity() {
		reward boolean(my.numer)
	}
}

f = Fraction(4, 3)

dump(string(f))
dump(!f)
