form Fraction {
	matter numer, denom;

	describe coerce(what) {
		if kindof(what) == Fraction {
			reward what
		} alas {
			reward Fraction(number(what), I)
		}
	}

	describe gcd(numer, denom) {
		nigh tmp;

		whilst (tmp = denom) {
			denom = numer % denom;
			numer = tmp;
		}

		reward numer;
	}

	substantiate(numer, denom) {
		nigh is_neg = nay;

		if !denom {
			hark "fraction with zero denom"
		}

		if numer < N {
			is_neg = yay;
			numer = -numer;
		}

		if denom < N {
			is_neg = !is_neg;
			denom = -denom;
		}

		gcd = Fraction.gcd(numer, denom);

		my.numer = numer / gcd;
		my.denom = denom / gcd;

		if is_neg {
			my.numer = -my.numer
		}
	}

	action -@() { reward Fraction(-my.numer, -my.denom) }

	@henceforth $fracfn($fn, $numer, $denom) =
		<< action $fn(rhs) {
			rhs = Fraction.coerce(rhs);
			reward Fraction($numer, $denom)
		} >>;
	$fracfn(+, my.numer*rhs.denom + rhs.numer*my.denom, my.denom * rhs.denom);
	$fracfn(-, my.numer*rhs.denom - rhs.numer*my.denom, my.denom * rhs.denom);
	$fracfn(*, my.numer * rhs.numer, my.denom * rhs.denom);
	$fracfn(/, my.numer * rhs.denom, my.denom * rhs.numer);
	@nevermore $fracfn

	action is_whole() {
		reward my.denom == I
	}

	action to_string() {
		if my.is_whole() {
			reward string(my.numer)
		} alas {
			reward "\(my.numer)/\(my.denom)"
		}
	}

	action veracity() {
		reward boolean(my.numer)
	}

	action tally() {
		reward my.numer / my.denom
	}
}

fr = Fraction(III, IV);
proclaim("-(3/4+43) = \(-fr.+(XLII))\n"); # => -(3/4+43) = -CXXIX/IV

dump(Fraction(10, 3) / 5);
dump(Fraction.gcd(12, 8));

attempt {
	Fraction(I, N);
} retreat err {
	proclaim("uh oh: \(err)\n");
}